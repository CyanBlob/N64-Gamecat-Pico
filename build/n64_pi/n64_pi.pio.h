// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// n64_pi //
// ------ //

#define n64_pi_wrap_target 10
#define n64_pi_wrap 28

static const uint16_t n64_pi_program_instructions[] = {
    0xa0c3, //  0: mov    isr, null                  
    0xa0e3, //  1: mov    osr, null                  
    0x6080, //  2: out    pindirs, 32                
    0x2091, //  3: wait   1 gpio, 17                 
    0x2090, //  4: wait   1 gpio, 16                 
    0x2011, //  5: wait   0 gpio, 17                 
    0x4010, //  6: in     pins, 16                   
    0x2010, //  7: wait   0 gpio, 16                 
    0x4010, //  8: in     pins, 16                   
    0x8020, //  9: push   block                      
            //     .wrap_target
    0x00c0, // 10: jmp    pin, 0                     
    0xa0e0, // 11: mov    osr, pins                  
    0x6072, // 12: out    null, 18                   
    0x6041, // 13: out    y, 1                       
    0x0078, // 14: jmp    !y, 24                     
    0x6021, // 15: out    x, 1                       
    0x004a, // 16: jmp    x--, 10                    
    0x8020, // 17: push   block                      
    0x80a0, // 18: pull   block                      
    0x6010, // 19: out    pins, 16                   
    0xa0eb, // 20: mov    osr, !null                 
    0x6080, // 21: out    pindirs, 32                
    0x2093, // 22: wait   1 gpio, 19                 
    0x000a, // 23: jmp    10                         
    0xa02b, // 24: mov    x, !null                   
    0x4030, // 25: in     x, 16                      
    0x4010, // 26: in     pins, 16                   
    0x2092, // 27: wait   1 gpio, 18                 
    0x8020, // 28: push   block                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program n64_pi_program = {
    .instructions = n64_pi_program_instructions,
    .length = 29,
    .origin = -1,
};

static inline pio_sm_config n64_pi_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + n64_pi_wrap_target, offset + n64_pi_wrap);
    return c;
}

void n64_pi_program_init(PIO pio, uint sm, uint offset) {
    // Init gpios [gpio0, gpio19] as inputs
    for (int i = 0; i <= 19; i++) {
        pio_gpio_init(pio, i);
    }
    // Set [AD0, AD15] as input
    pio_sm_set_consecutive_pindirs(pio, sm, 0, 19, false);
    pio_sm_config c = n64_pi_program_get_default_config(offset);
    // shift_right=false, autopush=false, push_threshold=32
    sm_config_set_in_shift(&c, false, false, 32);
    // shift_right=true, autopull=false, pull_threshold=32
    sm_config_set_out_shift(&c, true, false, 32);
    // Set [AD0, AD15] as in pins
    sm_config_set_in_pins(&c, 0);
    // Set [AD0, AD15] as out pins
    sm_config_set_out_pins(&c, 0, 16);
    // Set ALEH as JMP pin
    sm_config_set_jmp_pin(&c, 17);
    pio_sm_init(pio, sm, offset, &c);
}

#endif

