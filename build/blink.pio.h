// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----- //
// blink //
// ----- //

#define blink_wrap_target 0
#define blink_wrap 5

static const uint16_t blink_program_instructions[] = {
            //     .wrap_target
    0x4001, //  0: in     pins, 1                    
    0xbf06, //  1: mov    pins, isr              [31]
    0xbf42, //  2: nop                           [31]
    0xbf42, //  3: nop                           [31]
    0xbf42, //  4: nop                           [31]
    0xbf42, //  5: nop                           [31]
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program blink_program = {
    .instructions = blink_program_instructions,
    .length = 6,
    .origin = -1,
};

static inline pio_sm_config blink_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + blink_wrap_target, offset + blink_wrap);
    return c;
}

// Helper function (for use in C program) to initialize this PIO program
void blink_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {
    // Sets up state machine and wrap target. This function is automatically
    // generated in blink.pio.h.
    pio_sm_config c = blink_program_get_default_config(offset);
    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin+1);
    pio_gpio_init(pio, pin+2);
    pio_gpio_init(pio, pin+3);
    // Connect pin to SET pin (control with 'set' instruction)
    sm_config_set_out_pins(&c, pin, 4);
    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 4, true);
    // inputs
    sm_config_set_in_pins(&c, 0);
    pio_sm_set_consecutive_pindirs(pio, sm, 0, 2, false);
    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);
    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

#endif

